Here are some of the basic commands and instructions for git

>> git config to set username, email etc. it edits the ./.git/config text file to include/edit stuff.

>> git clone <url> or git clone <url> new_name
creates a copy of the repo, rename if you want
>> git fork <url>
creates a copy of someone else's repo
>> git add <filename> or git add * or git add .
adds file to staging area. git will include the changes in the next revision to the repo.
git ttracks files, not folders. It will respect the folder structure though. Basically empty folders are not tracked.
git add doesn't remove the files that have since been deleted, it only handles new and edited files. 
>> git add -p
asks whether you want to stage individual edits. Parts of files can be staged this way. status will show the same file as staged and unstaged if stage parts of an edit. (Advanced use case, not common or essential.)
>> git add --all handles that.
>> git rm --cached <filename> or git rm --cached -r <directoryname>
removes a file or folder from staging area
>> git commit or git commit -m "commit message"
make a commit duh
>> git diff or git diff --staged
shows all the changes made that has yet not been committed, or just the staged differences
>> git commit -am "message"
adds and then commits in one go
>> git status
tells status of the whole repo
>> git push or git push origin master
sends commit changes to remote repository (master branch to remote repo named origin in the second case)
for the first time you push, use git push -u origin master to track the changes to remote repo
>> git pull <remote> <destination_branch>
receives recent changes from remote repo
>> git remote add origin <url>

>> git log
shows a log of all commits and messages
git log --oneline       condensed summary, only initial characters of the sha and the commit message.
git log --stat          to display file insertions/deletions stat for the commits
git log --patch or -p   to display actual insertions/deletions in the files
git log --decorate      to display some additional info, e.g. tags, branch names
git log -n 10           to display only the last 10 commits
>> git show <SHA>
show log of given commit. the most recent commit in case no argument is given
>> git blame <filename>
shows the last edits of each line of a file - commit, author, time. Looks ugly, rarely used. -s switch to suppress author and timestamps. git blame shows unstaged adits as well, with commit SHA as 0000..00.

Undoing changes:
>> git reset --hard <commit hash> or git commit --hard origin/master
reverts code back to the specified version. This is to be treated as dangerous, because it deletes the commits newer than what you're checking out. Can still use git reflog to recover the deleted commits for 30 days or so. It is recommended that we use a backup branch before resetting the current branch.
>> the flags: --soft --mixed --hard: from reset the most recent commit is erased, and we get the commit whose SHA we provided. --mixed (default) means our last commit will now be in working directory, --soft means they will be in staging area. --hard means our most recent commit has been deleted and the <commit hash> is the only commit we have.
>> git reset right after staging something and no flags specified - will unstage the thing. git reset -p to unstage individual changes.

>> git commit --amend
make changes to the last commit - include files, change commit message. Treat as a fresh  commit, but with the same name/SHA as the most recent one.
>> git revert <SHA>
reverts the changes made in the given commit, and makes a new commit.

>> edit ./.git/.gitignore text file to list the files you don't want tracked. wildcards are allowed: can ignore whole folders this way.
# marks the line a comment
* is 0 or more character wildcard, ? is one character wildcard. example gitignore file- vi .gitignore (outside .git)
*.cpp
local.*
folder/
*.log

>> git tag -a <tag> 
to tag the most recent commit, e.g. v1.0.1 etc. git tag -d <tag> to remove the tag.
git tag -a <tag> <commit SHA> to tag older commits. Tag additions ask for a message in the editor.

Signing your work using asymmetric key cryptography
>> gpg --list-keys to check what keys you have already
>> gpg --gen-key to generate public-private pairs
>> git config user.signingkey <public key>
>> git tag -s 'tag name' or git commit -S ... to sign your tag/commit
>> anyone who has your public key on their keychain can verify you. Use if your entire group agrees to.

Branching:
>> git branch
shows all branches, asterisk in front of active branch
>> git branch <new_branch_name> or git branch <new_branch> <old_commit_SHA>
create a new branch same as current latest commit, or create a brach at the commit given
>> git checkout <branch_name>
switch to the branch, equivalently moves HEAD pointer to <branch_name> from Master (default branch)
>> git checkout -b <new_branch_name>
create a branch and then switch to it 
>> git merge <branch_name>
merges that branch to current branch
merging to master is usually not recommended, you may not like how they merged. merge master to this insted. for safety
>> git branch -d <branch_name> or git branch -D <branch_name> 
delete a branch or delete a branch without merging. d won't let you delete branches with unmerged commits.
>> git log --oneline --decorate --graph --all
one line per commit, (decorate) tell branch names, graph, all branches

Merge Conflicts:
line 1
<<<<< HEAD
line 2                          <- my changes
||||| merged common ancestors
line 3                          <- old lines
=============
line 4                          <- remote changes
>>>>>>>>> 019248WEIRDNUMBER     <- unique identifier
line 5 ...
Manually resolve and commit using 'git merge --continue'. The merge was made, but the lines were modified to mark them as conflicted. No commit was made till you've told git that you have manually resolved it. The same file might have multiple mergeconflicts. Or you can just abandon the endeavour by running 'git merge --abort'. Be careful, a single file can have multiple conflicts, so page through the whole file. Search for '====' for an easier time inside a large file.

>> git rebase is a powerful tool. to be researched later. also 'git rebase -i' for interactive - edit your history.

Pull Requests:
Are what made github so popular. Basically it is a way to merge my branch into your master. It can be treated as a merge request from one branch to the original owner of the repository. Github contributions work in this way - you fork the original source into your account, add the original repo as another remote in order to keep track of the progress, work on your copy to add feature/remove bug, pull once more from the original remote to see if there is coflicting progress, then submit a pull request so that the owner can pull your contributions in. You will be listed as a contributor to the original repo after the owner pulls in your changes. Check the Contributing.md file to find any guidelines the owners have set.

Starting in your own system:
>> git init or git init <repo_name>
Initialises a/the repo in your working directory

>> git bisect to binary search through your commit history to find out where the unit test started failing

manual test workflow:
git bisect start            to start the process
git bisect good <hash>      to say that this commit is good
git bisect bad <hash>       to say that this one is bad. Search will happen between these two points
git bisect bad <left empty to say the current head is bad>
                            as soon as good and bad commits are specified, git bisect will checkout a commit at the midpoint, say whether it is good or bad using:
git bisect good or git bisect bad
                            once this process has nailed down the commit where the error started happening, it will tell us: commit hash, author, date, changes. 
git bisect log > savefile   might be useful later
git bisect reset            to checkout cuurent branch again and act as if git bisect never ran
git bisect visualise        to get a visual representation of where we are at any stage

automatic ./test testing workflow
./test should return 0 iff the commit is good.
git bisect start, then good, then bad, then git bisect run. Enjoy.

>> Udacity Class Notes ===========================================================================================
1. version control is like a snapshot of that board game
git, mercurial, subversion are competitors
git is distributed version control system: everyone has a full copy of the project
centralized version control has one central PC that everything must pass through
git-scm means git source code manager
commit is the fundamental unit of git
checkout is when content of a commit has been copied to working directory
working directory -> staging area -> repository

2. .git contents: config, description, hooks (scripts to hook into git's different lifecycle events), info, objects (stores the commits, changes, everything), refs (pointers to commits, every branch is stored here)

3. Relative commit references: HEAD^ is the parent commit, HEAD^^ is the grandparent etc. Use HEAD^2 to get to the other parent (similarly for grandparents) if this is the result of a merge and we have multiple parents. HEAD~2 is HEAD^^

>> Missing Semester Class Notes ==================================================================================
1. Underlying Data model: Tracks snapshots of the top level directories using Directed Acyclic Graph. The folders are called trees and files called blobs inside git terminology. Git tracks the changes made from commit to commit.
blobs = & array(bytes)
trees = & map(streing, tree or blob)
commit = & struct{parents(array of commits), author, message, snapshot(tree)} 
^ everything is pointer to objects, where objects are refered to by their sha1 hashes

